== SEE ALSO
This repository is meant as a supplemental demo for the JMXClient at
https://github.com/andrewazores/container-jmc .

== REQUIREMENTS
JDK
Podman/Docker
Gradle

== BUILD
Use the included `build.sh` script, which will invoke `./gradlew build` to
compile the project sources as well as the appropriate container management
command to build an image.

== RUN
For convenience, `sh run.sh` can be used to run a demo. This will run a
container with an image containing the Listener class and the RJMX ports
exposed. The Listener image simply listens on its localhost port 9092 and writes
lines it receives to its stdout stream. A Client container will also be run
alongside the Listener.

With Podman, the Listener and Client containers are both inserted into a common
Pod, which facilitates simple socket communication between the containers. With
Docker, the containers share a Docker user-defined network, and the Listener
port 9092 is also mapped to the host machine's port 9092. Within the Docker
bridged network the Listener can be identified via its hostname of
"jmx-listener". Within the Podman pod both containers share "localhost".

With either container management system, this allows you to connect to the
Listener running within the container with netcat via "nc localhost 9092" and
write messages to the Listener. You can observe its output using
`podman logs -f container-jmx-podman-listener` or
`docker logs -f container-jmx-docker-listener` . The special case of a received
line of the form "fib n" where n is a natural number will cause the Listener to
compute and print the nth Fibonacci Number. This can be used to produce some
more interesting event data for recordings.

If you run run.sh with no arguments then the Client container is started in an
interactive shell-like mode. If you run it with arguments then the arguments
are treated as a series of shell-like commands delimited with semicolons,
equivalent to typing the commands into the shell in interactive mode.

=== EXAMPLES

The `run.sh` script will attempt to automatically detect if Podman or Docker is
available on your system. If both are available then Podman will be preferred.
This can be overridden by setting the environment variable `CMD` to the path
to your preferred container manager, ie `CMD=$(which docker) sh run.sh`.

`sh build.sh && sh run.sh`
This will set up the demo Listener and Client and drop you into the Client
"shell". Try "help" to see a listing of available commands.

`sh build.sh && sh run.sh "connect $TARGET;dump foo 10;wait-for foo;wait-for-download-foo"`
This will set up the demo and run a series of four commands within the client.
The client expects to find the target at $TARGET, which for Docker should be
"jmx-listener:9093" and for Podman should be "localhost:9093". The next
commands will trigger a 10s recording in the target JVM, wait for the recording
to finish, and wait for the embedded webserver to serve the recording file to
you (via ex. cURL) before exiting. You can then open the local recording file
with your tool of choice, such as JMC.

There are some demo "scripts" located in the "demos" directory. These can be
used as follows: `sh run.sh "$(more demos/demoname)"`, where "demoname" is
replaced with the name of the demo script file you want to run. Be sure to
select a demo with the correct container manager available on your host system,
if applicable.

